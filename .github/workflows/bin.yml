name: Binary CI

on:
  push:
    branches: ["main"]
    tags: ["bin@v*"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: bin/

env:
  RUST_BACKTRACE: 1

jobs:

  ################
  # Pull Request #
  ################

  pr:
    if: ${{ github.event_name == 'pull_request'
         && needs.clippy.result == 'success'
         && needs.docker.result == 'success'
         && needs.rustdoc.result == 'success'
         && needs.rustfmt.result == 'success'
         && needs.test.result == 'success' }}
    needs:
      - clippy
      - docker
      - rustdoc
      - rustfmt
      - test
    runs-on: ubuntu-latest
    steps:
      - run: true
        working-directory: ./




  ##########################
  # Linting and formatting #
  ##########################

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy

      - run: make cargo.lint

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - run: make cargo.fmt check=yes




  ###########
  # Testing #
  ###########

  test:
    strategy:
      fail-fast: false
      matrix:
        toolchain: ["stable", "nightly"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rust-src

      - run: cargo install cargo-careful
        if: ${{ matrix.toolchain == 'nightly' }}

      - run: make test.cargo
                  careful=${{ (matrix.toolchain == 'nightly' && 'yes')
                           ||                                   'no' }}




  ############
  # Building #
  ############

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v3

      - run: make docker.image debug=no no-cache=yes
                  tag=build-${{ github.run_number }}

      - run: make docker.tar
                  tags=build-${{ github.run_number }}
      - uses: actions/upload-artifact@v4
        with:
          name: docker-${{ github.run_number }}
          path: bin/.cache/docker/image.tar
          retention-days: 1




  #################
  # Documentation #
  #################

  rustdoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - run: make cargo.doc private=yes open=no
        env:
          RUSTFLAGS: -D warnings




  #############
  # Releasing #
  #############

  docker-push:
    name: docker push
    if: ${{ github.event_name == 'push'
         && (github.ref == 'refs/heads/main'
             || startsWith(github.ref, 'refs/tags/bin@v')) }}
    needs:
      - clippy
      - docker
      - rustdoc
      - rustfmt
      - test
    strategy:
      fail-fast: false
      matrix:
        registry: ["docker.io", "ghcr.io", "quay.io"]
    runs-on: ubuntu-latest
    steps:
      # Skip if this is fork and no credentials are provided.
      - id: skip
        run: echo "no=${{ !(
               github.repository_owner != 'instrumentisto'
               && ((matrix.registry == 'quay.io'
                    && secrets.QUAYIO_ROBOT_USER == '')
                || (matrix.registry == 'docker.io'
                    && secrets.DOCKERHUB_BOT_USER == ''))
             ) }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        if: ${{ steps.skip.outputs.no == 'true' }}

      - uses: actions/download-artifact@v4
        with:
          name: docker-${{ github.run_number }}
          path: bin/.cache/docker/
        if: ${{ steps.skip.outputs.no == 'true' }}
      - run: make docker.untar
        if: ${{ steps.skip.outputs.no == 'true' }}

      - name: Login to ${{ matrix.registry }} container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ (matrix.registry == 'docker.io'
                         && secrets.DOCKERHUB_BOT_USER)
                     || (matrix.registry == 'quay.io'
                         && secrets.QUAYIO_ROBOT_USER)
                     || github.repository_owner }}
          password: ${{ (matrix.registry == 'docker.io'
                         && secrets.DOCKERHUB_BOT_PASS)
                     || (matrix.registry == 'quay.io'
                         && secrets.QUAYIO_ROBOT_TOKEN)
                     || secrets.GITHUB_TOKEN }}
        if: ${{ steps.skip.outputs.no == 'true' }}

      - name: Parse semver versions from Git tag
        id: semver
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{ github.ref }}
          regex: '^refs/tags/bin@v((([0-9]+)\.[0-9]+)\.[0-9]+(-.+)?)$'
        if: ${{ steps.skip.outputs.no == 'true'
             && startsWith(github.ref, 'refs/tags/bin@v') }}
      - name: Form version Docker tags
        id: tags
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            let versions = '${{ steps.semver.outputs.group1 }}';
            if ('${{ steps.semver.outputs.group4 }}' === '') {
              versions += ',${{ steps.semver.outputs.group2 }}';
              if ('${{ steps.semver.outputs.group3 }}' !== '0') {
                versions += ',${{ steps.semver.outputs.group3 }}';
              }
              versions += ',latest';
            }
            return versions;
        if: ${{ steps.skip.outputs.no == 'true'
             && startsWith(github.ref, 'refs/tags/bin@v') }}

      - run: make docker.tags
                  registries=${{ matrix.registry }}
                  of=build-${{ github.run_number }}
                  tags=${{ (startsWith(github.ref, 'refs/tags/bin@v')
                            && steps.tags.outputs.result)
                        ||     'edge' }}
        if: ${{ steps.skip.outputs.no == 'true' }}
      - run: make docker.push
                  registries=${{ matrix.registry }}
                  tags=${{ (startsWith(github.ref, 'refs/tags/bin@v')
                            && steps.tags.outputs.result)
                        ||     'edge' }}
        if: ${{ steps.skip.outputs.no == 'true' }}

      # On GitHub Container Registry README is automatically updated on pushes.
      - name: Update README on Docker Hub
        uses: christian-korneck/update-container-description-action@v1
        with:
          provider: dockerhub
          destination_container_repo: ${{ github.repository_owner }}/medea-turn
          readme_file: bin/README.md
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_BOT_USER }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_BOT_PASS }}
        if: ${{ steps.skip.outputs.no == 'true'
             && matrix.registry == 'docker.io' }}
      - name: Update README on Quay.io
        uses: christian-korneck/update-container-description-action@v1
        with:
          provider: quay
          destination_container_repo: ${{ matrix.registry }}/${{ github.repository_owner }}/medea-turn
          readme_file: bin/README.md
        env:
          DOCKER_APIKEY: ${{ secrets.QUAYIO_API_TOKEN }}
        if: ${{ steps.skip.outputs.no == 'true'
             && matrix.registry == 'quay.io' }}

  release-github:
    name: release (GitHub)
    if: ${{ startsWith(github.ref, 'refs/tags/bin@v') }}
    needs: ["docker-push"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse release version
        id: release
        run: echo "version=${GITHUB_REF#refs/tags/bin@v}"
             >> $GITHUB_OUTPUT
      - name: Verify release version matches Cargo manifest
        run: |
          test "${{ steps.release.outputs.version }}" \
            == "$(grep -m1 'version = "' Cargo.toml | cut -d'"' -f2)"

      - name: Ensure CHANGELOG date is today
        run: |
          today="$(date '+%Y-%m-%d')"
          changelog="$(grep -E '^## \[${{ steps.release.outputs.version }}\] Â·'\
                            CHANGELOG.md \
                       | cut -d' ' -f4 | tr -d ' ')"
          echo "Changelog: $changelog"
          echo "Today: $today"
          [ "$changelog" = "$today" ]
      - name: Parse CHANGELOG link
        id: changelog
        run: echo "link=${{ github.server_url }}/${{ github.repository }}/blob/bin@v${{ steps.release.outputs.version }}/bin/CHANGELOG.md#$(sed -n '/^## \[${{ steps.release.outputs.version }}\]/{s/^## \[\(.*\)\][^0-9]*\([0-9].*\)/\1--\2/;s/[^0-9a-z-]*//g;p;}' CHANGELOG.md)"
             >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: bin/${{ steps.release.outputs.version }}
          body: |
            [API docs](https://docs.rs/medea-turn/${{ steps.release.outputs.version }})
            [Changelog](${{ steps.changelog.outputs.link }})
